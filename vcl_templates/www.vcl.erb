# >> custom backends
backend F_origin {
    .connect_timeout = 5s;
    .dynamic = true;
    .port = "443";
    .host = "<%= config['origin_hostname'] %>";
    .first_byte_timeout = 120s;
    .max_connections = 200;
    .between_bytes_timeout = 120s;
    .share_key = "<%= config['service_id'] %>";

    .ssl = true;
    .ssl_hostname = "<%= config['origin_hostname'] %>";

    .probe = {
        .request = "HEAD / HTTP/1.1" "Host: <%= environment == 'staging' ? 'www.gov.uk' : config['origin_hostname'] %>" "Connection: close";
        .threshold = 1;
        .window = 2;
        .timeout = 5s;
        .initial = 1;
        .expected_response = 200;
        .interval = 1s;
      }
}
# Mirror backend for provider 0
backend F_mirror0 {
    .connect_timeout = 1s;
    .dynamic = true;
    .port = "443";
    .host = "<%= config['provider0_mirror_hostname'] %>";
    .first_byte_timeout = 15s;
    .max_connections = 200;
    .between_bytes_timeout = 10s;
    .share_key = "<%= config['service_id'] %>";

    .ssl = true;
    .ssl_hostname = "<%= config['provider0_mirror_hostname'] %>";

    .probe = {
        .request = "HEAD / HTTP/1.1" "Host: <%= config['provider0_mirror_hostname'] %>" "Connection: close";
        .threshold = 1;
        .window = 2;
        .timeout = 5s;
        .initial = 1;
        .expected_response = 200;
        .interval = 60s;
      }
}
# Mirror backend for provider 1
backend F_mirror1 {
    .connect_timeout = 1s;
    .dynamic = true;
    .port = "443";
    .host = "<%= config['provider1_mirror_hostname'] %>";
    .first_byte_timeout = 15s;
    .max_connections = 200;
    .between_bytes_timeout = 10s;
    .share_key = "<%= config['service_id'] %>";

    .ssl = true;
    .ssl_hostname = "<%= config['provider1_mirror_hostname'] %>";

    .probe = {
        .request = "HEAD / HTTP/1.1" "Host: <%= config['provider1_mirror_hostname'] %>" "Connection: close";
        .threshold = 1;
        .window = 2;
        .timeout = 5s;
        .initial = 1;
        .expected_response = 200;
        .interval = 60s;
      }
}

# << custom backends

acl purge {
  "37.26.90.227";     # Platform 1 production
  "37.26.93.252";     # Platform 1 mirrors
  "31.210.241.100";   # Carrenza mirrors
  "23.235.23.0"/20;   # Fastly cache node
  "103.244.50.0"/24;  # Fastly cache node
  "103.245.222.0"/23; # Fastly cache node
  "103.245.224.0"/24; # Fastly cache node
  "185.31.16.0"/22;   # Fastly cache node
  "199.27.72.0"/21;   # Fastly cache node
  "202.21.128.0"/24;  # Fastly cache node
  "203.57.145.0"/24;  # Fastly cache node
}

sub vcl_recv {

  # >> custom recv
  # Allow FASTLYPURGE from IPs defined in the ACL only, else return a HTTP 403
  if (req.request == "FASTLYPURGE") {
    if (client.ip ~ purge) {
      return (lookup);
    }
    set req.request = "GET";
    error 403 "Forbidden";
  }
  # << custom recv

  # >> normally from `request settings` UI
  # Force SSL.
  if (!req.http.Fastly-SSL) {
     error 801 "Force SSL";
  }

  # Append to XFF. Unsure about this restart condition?
  if (req.restarts == 0) {
    }
     if (!req.http.Fastly-FF) {
       set req.http.Fastly-Temp-XFF = req.http.X-Forwarded-For ", " client.ip;
     } else {
       set req.http.Fastly-Temp-XFF = req.http.X-Forwarded-For;
     }

  # Serve from stale for 24 hours if origin is sick
  set req.grace = 24h;
  # << normally from `request settings` UI

  # >> custom recv
  # Default backend.
  set req.backend = F_origin;
<% if environment == 'staging' %>
  # Force host header for staging.
  set req.http.host = "www.gov.uk";
<% end %>

  # Note that if (req.restarts == 1), we don't change the backend as
  # we're attempting to serve from stale.

  # Failover to mirror.
  if (req.restarts > 1) {
    # Don't serve from stale for mirrors
    set req.grace = 0s;
    set req.http.Fastly-Failover = "1";

    set req.backend = F_mirror0;
    set req.http.host = "<%= config['provider0_mirror_hostname'] %>";
  }

  # FIXME: Prefer a fallback director if we move to Varnish 3
  if (req.restarts > 2) {
    set req.backend = F_mirror1;
    set req.http.host = "<%= config['provider1_mirror_hostname'] %>";
  }

  # Unspoofable original client address.
  set req.http.True-Client-IP = req.http.Fastly-Client-IP;
  # << custom recv

#FASTLY recv

  # >> not reproduced by macro
  if (req.request != "HEAD" && req.request != "GET" && req.request != "PURGE") {
    return(pass);
  }

  return(lookup);
  # << not reproduced by macro
}

sub vcl_fetch {
#FASTLY fetch

  # >> custom
  if ((beresp.status >= 500 && beresp.status <= 599) && req.restarts < 3 && (req.request == "GET" || req.request == "HEAD") && !beresp.http.No-Fallback) {
    set beresp.saintmode = 5s;
    return (restart);
  }

  if (req.restarts == 0) {
    # Keep stale for origin
    set beresp.grace = 24h;
  }
  # << custom

  # >> not reproduced by macro
  if(req.restarts > 0 ) {
    set beresp.http.Fastly-Restarts = req.restarts;
  }

  if (beresp.http.Set-Cookie) {
    set req.http.Fastly-Cachetype = "SETCOOKIE";
    return (pass);
  }

  if (beresp.http.Cache-Control ~ "private") {
    set req.http.Fastly-Cachetype = "PRIVATE";
    return (pass);
  }

  if (beresp.status >= 500 && beresp.status <= 599) {
    set req.http.Fastly-Cachetype = "ERROR";
    set beresp.ttl = 1s;
    set beresp.grace = 5s;
    return (deliver);
  }

  if (beresp.http.Expires || beresp.http.Surrogate-Control ~ "max-age" || beresp.http.Cache-Control ~"(s-maxage|max-age)") {
    # keep the ttl here
  } else {
    # apply the default ttl
    set beresp.ttl = <%= config['default_ttl'] %>s;
  }
  # << not reproduced by macro
}

sub vcl_hit {
#FASTLY hit
}

sub vcl_miss {
#FASTLY miss
}

sub vcl_deliver {
#FASTLY deliver
}

sub vcl_error {

  # If this is our first attempt, assume origin is down but probe hasn't yet detected as unhealthy
  # Set a marker that vcl_recv will pick up and set the backend to the first mirror accordingly
  if (req.restarts < 3) {
    return (restart);
  }

#FASTLY error
}

# <<
# pipe cannot be included.
# >>

sub vcl_pass {
#FASTLY pass
}

sub vcl_hash {
#FASTLY hash
}
