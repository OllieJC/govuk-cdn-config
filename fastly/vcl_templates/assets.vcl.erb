backend F_origin {
    .connect_timeout = 5s;
    .dynamic = true;
    .port = "<%= config.fetch('origin_port', '443') %>";
    .host = "<%= config.fetch('origin_hostname') %>";
    .first_byte_timeout = 15s;
    .max_connections = 200;
    .between_bytes_timeout = 10s;
    .share_key = "<%= config.fetch('service_id') %>";

    .ssl = true;
    .ssl_hostname = "<%= config.fetch('origin_hostname') %>";

    .probe = {
        .request =
            "HEAD /templates/503.html.erb HTTP/1.1"
            "Host: <%= config.fetch('origin_hostname') %>"
            "Connection: close"
            "User-Agent: Varnish/fastly (healthcheck)";
        .threshold = 1;
        .window = 2;
        .timeout = 5s;
        .initial = 1;
        .expected_response = 200;
        .interval = 60s;
      }
}

sub vcl_recv {
  # Unspoofable original client address
  set req.http.True-Client-IP = req.http.Fastly-Client-IP;

#FASTLY recv

  # default conditions
  set req.backend = F_origin;
  # end default conditions

    if (req.request != "HEAD" && req.request != "GET" && req.request != "FASTLYPURGE") {
      return(pass);
    }

    return(lookup);
}


sub vcl_fetch {
#FASTLY fetch

  if ((beresp.status == 500 || beresp.status == 503) && req.restarts < 1 && (req.request == "GET" || req.request == "HEAD")) {
    restart;
  }

  if(req.restarts > 0 ) {
    set beresp.http.Fastly-Restarts = req.restarts;
  }

  if (beresp.http.Set-Cookie) {
    set req.http.Fastly-Cachetype = "SETCOOKIE";
    return (pass);
  }

  if (beresp.http.Cache-Control ~ "private") {
    set req.http.Fastly-Cachetype = "PRIVATE";
    return (pass);
  }

  if (beresp.status == 500 || beresp.status == 503) {
    set req.http.Fastly-Cachetype = "ERROR";
    set beresp.ttl = 1s;
    set beresp.grace = 5s;
    return (deliver);
  }


  if (beresp.http.Expires || beresp.http.Surrogate-Control ~ "max-age" || beresp.http.Cache-Control ~"(s-maxage|max-age)") {
    # keep the ttl here
  } else {
    # apply the default ttl
    set beresp.ttl = <%= config.fetch('default_ttl') %>s;
  }

  return(deliver);
}

sub vcl_hit {
#FASTLY hit

  if (!obj.cacheable) {
    return(pass);
  }
  return(deliver);
}

sub vcl_miss {
#FASTLY miss
  return(fetch);
}

sub vcl_deliver {
#FASTLY deliver
  return(deliver);
}

sub vcl_error {
#FASTLY error
}

sub vcl_pass {
#FASTLY pass
}

sub vcl_hash {
#FASTLY hash
}
